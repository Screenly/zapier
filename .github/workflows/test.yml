name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev jq
        npm ci
    - name: Run tests with coverage
      run: |
        # Run tests with coverage and capture results in JSON format
        npm test -- --coverage-reporters=lcov --coverage-reporters=json-summary --json --outputFile=test-results.json

        # Extract coverage from JSON and format for summary
        echo "# Test Results (Node ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage" >> $GITHUB_STEP_SUMMARY
        echo "| Type | Coverage | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|----------|" >> $GITHUB_STEP_SUMMARY

        # Use jq to parse the coverage JSON
        jq -r '.total |
          "| Statements | \(.statements.pct)% | \(.statements.covered)/\(.statements.total) |\n| Branches | \(.branches.pct)% | \(.branches.covered)/\(.branches.total) |\n| Functions | \(.functions.pct)% | \(.functions.covered)/\(.functions.total) |\n| Lines | \(.lines.pct)% | \(.lines.covered)/\(.lines.total) |"' coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY || {
            echo "| Coverage data not available | - | - |" >> $GITHUB_STEP_SUMMARY
          }

        # Add test results using jq
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Total | Passed | Failed | Skipped |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|---------|----------|" >> $GITHUB_STEP_SUMMARY
        jq -r '"| \(.numTotalTests) | \(.numPassedTests) | \(.numFailedTests) | \(.numPendingTests) |"' test-results.json >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
    - name: Run visual tests
      run: |
        # Create snapshot directory
        mkdir -p test/__image_snapshots__

        # Run tests with update flag to generate snapshots and JSON output
        CI=1 xvfb-run --auto-servernum --server-args="-screen 0 1280x800x24" npm run test:visual:ci -- -u --json --outputFile=visual-test-results.json

    - name: Generate visual test summary
      if: always()
      run: |
        echo "## Visual Test Results" >> $GITHUB_STEP_SUMMARY

        # Show test results using jq
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Total | Passed | Failed | Skipped |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|---------|----------|" >> $GITHUB_STEP_SUMMARY
        if [ -f "visual-test-results.json" ]; then
          jq -r '"| \(.numTotalTests) | \(.numPassedTests) | \(.numFailedTests) | \(.numPendingTests) |"' visual-test-results.json >> $GITHUB_STEP_SUMMARY || {
            echo "| Failed to parse test results | - | - | - |" >> $GITHUB_STEP_SUMMARY
          }
        else
          echo "| No test results file found | - | - | - |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        # Show screenshots
        echo "### Screenshots" >> $GITHUB_STEP_SUMMARY
        shopt -s nullglob  # Handle case when no files match pattern
        for img in test/__image_snapshots__/*.png; do
          if [ -f "$img" ]; then
            name=$(basename "$img" -snap.png | sed 's/ci-//')
            echo "#### $name" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>$(basename "$img")</summary>" >> $GITHUB_STEP_SUMMARY
            echo "<img src=\"data:image/png;base64,$(base64 -w 0 "$img")\" width=\"800\">" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: Upload screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-screenshots
        path: test/__image_snapshots__
        if-no-files-found: warn