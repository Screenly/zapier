name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev jq xvfb fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcups2 libdbus-1-3 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 libxcomposite1 libxdamage1 libxfixes3 libxkbcommon0 libxrandr2 xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable

        # Install Chrome
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb
        sudo apt-get install -f

        npm ci
    - name: Run tests with coverage
      run: |
        # Run tests with coverage and capture results in JSON format
        npm test -- --coverage-reporters=lcov --coverage-reporters=json-summary --json --outputFile=test-results.json

        # Extract coverage from JSON and format for summary
        echo "# Test Results (Node ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage" >> $GITHUB_STEP_SUMMARY
        echo "| Type | Coverage | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|----------|" >> $GITHUB_STEP_SUMMARY

        # Use jq to parse the coverage JSON
        jq -r '.total |
          "| Statements | \(.statements.pct)% | \(.statements.covered)/\(.statements.total) |\n| Branches | \(.branches.pct)% | \(.branches.covered)/\(.branches.total) |\n| Functions | \(.functions.pct)% | \(.functions.covered)/\(.functions.total) |\n| Lines | \(.lines.pct)% | \(.lines.covered)/\(.lines.total) |"' coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY || {
            echo "| Coverage data not available | - | - |" >> $GITHUB_STEP_SUMMARY
          }

        # Add test results using jq
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Total | Passed | Failed | Skipped |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|---------|----------|" >> $GITHUB_STEP_SUMMARY
        jq -r '"| \(.numTotalTests) | \(.numPassedTests) | \(.numFailedTests) | \(.numPendingTests) |"' test-results.json >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
    - name: Run visual tests
      run: |
        mkdir -p test/__image_snapshots__

        # Run tests with proper Puppeteer configuration
        PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome CI=1 xvfb-run --auto-servernum --server-args="-screen 0 1280x800x24" npm run test:visual:ci -- --json --outputFile=visual-test-results.json 2>&1 | tee test-output.log

        # Show the full test output for debugging
        echo "=== Full test output ==="
        cat test-output.log

        # Show test results if available
        if [ -f "visual-test-results.json" ]; then
          echo "## Visual Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Total | Passed | Failed | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          jq -r '"| \(.numTotalTests) | \(.numPassedTests) | \(.numFailedTests) | \(.numPendingTests) |"' visual-test-results.json >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results file was generated" >> $GITHUB_STEP_SUMMARY
        fi

        # Show directory contents
        echo "=== Directory contents ==="
        ls -la test/__image_snapshots__/

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: |
          test/__image_snapshots__/*.png
          visual-test-results.json