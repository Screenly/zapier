name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev jq
        npm ci
    - name: Run tests with coverage
      run: |
        # Run tests with coverage and capture results
        npm test 2>&1 | tee test-output.log

        # Extract coverage from JSON and format for summary
        echo "# Test Results (Node ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage" >> $GITHUB_STEP_SUMMARY
        echo "| Type | Coverage | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|----------|" >> $GITHUB_STEP_SUMMARY

        # Use jq to parse the JSON and format the table
        jq -r '.total |
          "| Statements | \(.statements.pct)% | \(.statements.covered)/\(.statements.total) |\n| Branches | \(.branches.pct)% | \(.branches.covered)/\(.branches.total) |\n| Functions | \(.functions.pct)% | \(.functions.covered)/\(.functions.total) |\n| Lines | \(.lines.pct)% | \(.lines.covered)/\(.lines.total) |"' coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY

        # Add test results summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Total | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

        # Parse test results from Jest output
        total=$(grep -o 'Tests:.*' test-output.log | sed -E 's/Tests: +([0-9]+).*/\1/')
        passed=$(grep -o 'Tests:.*' test-output.log | sed -E 's/Tests: +[0-9]+ passed, ([0-9]+).*/\1/')
        failed=$(grep -o 'Tests:.*' test-output.log | sed -E 's/Tests: +[0-9]+ passed, [0-9]+ failed, ([0-9]+).*/\1/' || echo "0")
        echo "| $total | $passed | $failed |" >> $GITHUB_STEP_SUMMARY
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
    - name: Run visual tests
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x800x24" npm run test:visual:ci -- -u
    - name: Generate visual test summary
      if: always()
      run: |
        echo "## Visual Test Results" >> $GITHUB_STEP_SUMMARY

        # Function to embed image
        embed_image() {
          local img="$1"
          if [ -f "$img" ]; then
            echo "<img src=\"data:image/png;base64,$(base64 -w 0 "$img")\" width=\"800\">" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        }

        # Show each screenshot
        for img in __image_snapshots__/*.png; do
          if [ -f "$img" ]; then
            name=$(basename "$img" -snap.png | sed 's/ci-//')
            echo "### $name" >> $GITHUB_STEP_SUMMARY
            embed_image "$img"
          fi
        done

        # Show any diffs
        if [ -d "__image_snapshots__/__diff_output__" ]; then
          echo "### ⚠️ Visual Differences" >> $GITHUB_STEP_SUMMARY
          for diff in __image_snapshots__/__diff_output__/*.png; do
            if [ -f "$diff" ]; then
              name=$(basename "$diff" .png | sed 's/ci-//' | sed 's/-diff//')
              echo "#### $name (diff)" >> $GITHUB_STEP_SUMMARY
              embed_image "$diff"
            fi
          done
        fi
    - name: Upload screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-screenshots
        path: |
          __image_snapshots__/*.png
          __image_snapshots__/__diff_output__/*.png